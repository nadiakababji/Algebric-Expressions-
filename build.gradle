plugins {
  id 'application'
  id 'com.diffplug.spotless' version '6.22.0'
  id 'jacoco'
  id 'pmd'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
  }
}

configurations {
  umlDoclet
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
  testImplementation 'it.unimi.di.prog2:jubbiot:0.3a0'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  umlDoclet 'nl.talsmasoftware:umldoclet:2.1.2'
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs.add('-Xlint:all')
  options.compilerArgs.add('-Werror') 
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    events 'skipped', 'failed'
    afterSuite { desc, result ->
      if (!desc.parent) {
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
  defaultCharacterEncoding = 'UTF-8'
  finalizedBy jacocoTestReport
}

javadoc {
  exclude('utils/**', 'clients/**')
  options {
    encoding = 'UTF-8'
    charSet = 'UTF-8'
    links = [ 'https://docs.oracle.com/en/java/javase/17/docs/api/' ]
    docTitle = 'Luppolo'
    header = '<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>'
    showFromPrivate()
    addBooleanOption 'Xdoclint:all', true
    addBooleanOption 'Werror', true
    addBooleanOption '-allow-script-in-comments', true
  }
}

tasks.register("UMLJavadoc", Javadoc) {
  group = 'Documentation'
  description = 'Generates Javadoc API documentation and UML diagrams for the main source code.'
  source = sourceSets.main.allJava
  classpath = sourceSets.main.compileClasspath
  destinationDir = layout.buildDirectory.dir('docs/umljavadoc').get().asFile
  options {
    encoding = 'UTF-8'
    charSet = 'UTF-8'
    links = [ 'https://docs.oracle.com/en/java/javase/17/docs/api/' ]
    docTitle = 'Luppolo + UML'
    docletpath = configurations.umlDoclet.files.asType(List)
    doclet = 'nl.talsmasoftware.umldoclet.UMLDoclet'
    showFromPrivate()
    addStringOption 'umlImageDirectory', 'images'
    addStringOption 'umlImageFormat', 'svg,png'
    addStringOption 'Xdoclint:none', '-quiet'
  }
}

spotless {
  enforceCheck false
  java {
    googleJavaFormat('1.22.0')
    removeUnusedImports()
    indentWithSpaces(2)
    endWithNewline()
  }
}

tasks.withType(JavaExec) {
  enableAssertions = project.hasProperty('enableAssertions') ? project.getProperty('enableAssertions') : false
}

tasks.register('consegna', Exec) {
  dependsOn spotlessApply, compileJava, javadoc
  commandLine 'git', 'add', 'src/main/java'
  doLast {
    exec {
      ignoreExitValue true
      commandLine 'git', 'commit', '-m', 'Consegna'
    }
    exec {
      commandLine 'git', 'push'
    }
  }
}

tasks.register('aggiorna', Exec) {
  commandLine 'git', 'fetch', 'https://x:' + project.gitlab_token + '@gitlab.di.unimi.it/prog2/progetti/240610.git'
  doLast {
    exec {
      commandLine 'git', 'restore', '-s', 'FETCH_HEAD', 'README.md', 'pmd.xml', 'build.gradle', 'gradle.properties', 'espressioni', 'tests'
    }
    exec {
      commandLine 'git', 'add', 'README.md', 'pmd.xml', 'build.gradle', 'gradle.properties', 'espressioni', 'tests'
    }
    exec {
      ignoreExitValue true
      commandLine 'git', 'commit', '-m', 'Aggiornamento'
    }
  }
}

tasks.register('cleanActual', Delete) {
  delete fileTree('tests').matching {
    include '**/actual-*.txt'
  }
}

clean {
  dependsOn cleanActual
}

pmd {
  consoleOutput = false
  ignoreFailures = true
  toolVersion = '7.2.0'
  rulesMinimumPriority = 5
  ruleSets = [file('pmd.xml').toString()]
}